// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Context.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20210628210923_Intial")]
    partial class Intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.AppliedVacancy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Company_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Vacancy_Id")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<bool>("withDraw")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("Company_Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("Vacancy_Id");

                    b.HasIndex("status");

                    b.ToTable("AppliedVacancy");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Property<int>("Cat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cat_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cat_Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country_Id")
                        .HasColumnType("int");

                    b.HasKey("City_Id");

                    b.HasIndex("Country_Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Property<int>("Company_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaceProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FoundedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Company_Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("Manager_Id")
                        .IsUnique()
                        .HasFilter("[Manager_Id] IS NOT NULL");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Models.CompanyVacany", b =>
                {
                    b.Property<int>("Company_Id")
                        .HasColumnType("int");

                    b.Property<int>("Vacancy_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Company_Id", "Vacancy_Id");

                    b.HasIndex("Vacancy_Id");

                    b.ToTable("CompanyVacany");
                });

            modelBuilder.Entity("Models.Countries", b =>
                {
                    b.Property<int>("country_id")
                        .HasColumnType("int");

                    b.Property<string>("Country_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone_code")
                        .HasColumnType("int");

                    b.Property<string>("Sort_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("country_id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Models.JobCategory", b =>
                {
                    b.Property<int>("JobCat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("JobCat_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobCat_Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("JobCategory");
                });

            modelBuilder.Entity("Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("Models.JobTypeVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Vacancy_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("Vacancy_Id");

                    b.ToTable("jobTypeVacancies");
                });

            modelBuilder.Entity("Models.KeySkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("KeySkills");
                });

            modelBuilder.Entity("Models.KeySkillsVacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KeySkillId")
                        .HasColumnType("int");

                    b.Property<int?>("VacancyVacancy_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KeySkillId");

                    b.HasIndex("VacancyVacancy_Id");

                    b.ToTable("KeySkillsVacancies");
                });

            modelBuilder.Entity("Models.Onlineprofile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("userID");

                    b.ToTable("Onlineprofiles");
                });

            modelBuilder.Entity("Models.Questions", b =>
                {
                    b.Property<int>("Ques_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCat_Id")
                        .HasColumnType("int");

                    b.Property<string>("Ques_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ques_Id");

                    b.HasIndex("JobCat_Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Models.Rating", b =>
                {
                    b.Property<int>("Rate_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Company_Id")
                        .HasColumnType("int");

                    b.Property<double>("OverAllRate")
                        .HasColumnType("float");

                    b.Property<string>("Rate_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SafetyRate")
                        .HasColumnType("float");

                    b.Property<double>("SalRate")
                        .HasColumnType("float");

                    b.Property<double>("ServiceRate")
                        .HasColumnType("float");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("WorkEnvironmentRate")
                        .HasColumnType("float");

                    b.HasKey("Rate_Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Models.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Dislike")
                        .HasColumnType("bit");

                    b.Property<bool>("Like")
                        .HasColumnType("bit");

                    b.Property<int>("qId")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("qId");

                    b.HasIndex("userId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Models.RoleUser", b =>
                {
                    b.Property<string>("Role_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Role_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country_Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Strength")
                        .HasColumnType("real");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Country_Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("title");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Models.UserCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<int>("Company_Id")
                        .HasColumnType("int");

                    b.Property<bool>("StillWorking")
                        .HasColumnType("bit");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("from")
                        .HasColumnType("datetime2");

                    b.Property<int>("title")
                        .HasColumnType("int");

                    b.Property<DateTime?>("to")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("Company_Id");

                    b.HasIndex("User_Id");

                    b.HasIndex("title");

                    b.ToTable("UserCompany");
                });

            modelBuilder.Entity("Models.UserQues", b =>
                {
                    b.Property<int>("Ques_Id")
                        .HasColumnType("int");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumOfVote")
                        .HasColumnType("int");

                    b.Property<int>("Reports")
                        .HasColumnType("int");

                    b.Property<int>("userQues_Id")
                        .HasColumnType("int");

                    b.HasKey("Ques_Id", "User_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserQues");
                });

            modelBuilder.Entity("Models.Vacancy", b =>
                {
                    b.Property<int>("Vacancy_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("JobCat_Id")
                        .HasColumnType("int");

                    b.Property<string>("Vacancy_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Vacancy_Id");

                    b.HasIndex("JobCat_Id");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("Models.locationcompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cityId")
                        .HasColumnType("int");

                    b.Property<int>("companyId")
                        .HasColumnType("int");

                    b.Property<int>("countryId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("cityId");

                    b.HasIndex("companyId");

                    b.HasIndex("countryId");

                    b.ToTable("Locationcompanies");
                });

            modelBuilder.Entity("Models.typeOfEducation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("typeOfEducations");
                });

            modelBuilder.Entity("Models.userEducation", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("companyID")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("userID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("companyID");

                    b.HasIndex("type");

                    b.HasIndex("userID");

                    b.ToTable("userEducations");
                });

            modelBuilder.Entity("Models.userSkills", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("skillID")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("skillID");

                    b.HasIndex("userId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.AppliedVacancy", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("AppliedVacancies")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("AppliedVacancies")
                        .HasForeignKey("User_Id");

                    b.HasOne("Models.Vacancy", "Vacancy")
                        .WithMany("AppliedVacancies")
                        .HasForeignKey("Vacancy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Status", "State")
                        .WithMany()
                        .HasForeignKey("status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("State");

                    b.Navigation("User");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Models.City", b =>
                {
                    b.HasOne("Models.Countries", "Country")
                        .WithMany("City")
                        .HasForeignKey("Country_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("Companies")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("Models.Company", "Manager_Id");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.CompanyVacany", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("CompanyVacanies")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Vacancy", "Vacancy")
                        .WithMany("CompanyVacanies")
                        .HasForeignKey("Vacancy_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Models.JobCategory", b =>
                {
                    b.HasOne("Models.Category", "Category")
                        .WithMany("jobCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.JobTypeVacancy", b =>
                {
                    b.HasOne("Models.JobType", "JobType")
                        .WithMany("jobTypeVacancies")
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Vacancy", "Vacancy")
                        .WithMany("jobTypeVacancies")
                        .HasForeignKey("Vacancy_Id");

                    b.Navigation("JobType");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Models.KeySkillsVacancy", b =>
                {
                    b.HasOne("Models.KeySkills", "KeySkills")
                        .WithMany("KeySkillsVacancies")
                        .HasForeignKey("KeySkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Vacancy", "Vacancy")
                        .WithMany("KeySkillsVacancies")
                        .HasForeignKey("VacancyVacancy_Id");

                    b.Navigation("KeySkills");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Models.Onlineprofile", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Onlineprofiles")
                        .HasForeignKey("userID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Questions", b =>
                {
                    b.HasOne("Models.JobCategory", "JobCat")
                        .WithMany("Questions")
                        .HasForeignKey("JobCat_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCat");
                });

            modelBuilder.Entity("Models.Rating", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("Rating")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("Rating")
                        .HasForeignKey("User_Id");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Reaction", b =>
                {
                    b.HasOne("Models.Questions", "Question")
                        .WithMany("reactions")
                        .HasForeignKey("qId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("reactions")
                        .HasForeignKey("userId");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.RoleUser", b =>
                {
                    b.HasOne("Models.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("City_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Countries", "Country")
                        .WithMany("Users")
                        .HasForeignKey("Country_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.JobCategory", "JobCategory")
                        .WithMany("Users")
                        .HasForeignKey("title");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("Models.UserCompany", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("UserCompanies")
                        .HasForeignKey("Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("UserCompanies")
                        .HasForeignKey("User_Id");

                    b.HasOne("Models.JobCategory", "JobCategory")
                        .WithMany()
                        .HasForeignKey("title")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.UserQues", b =>
                {
                    b.HasOne("Models.Questions", "Question")
                        .WithMany("UserQuess")
                        .HasForeignKey("Ques_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("UserQuess")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Vacancy", b =>
                {
                    b.HasOne("Models.JobCategory", "JobCategory")
                        .WithMany("Vacancies")
                        .HasForeignKey("JobCat_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("Models.locationcompany", b =>
                {
                    b.HasOne("Models.City", "City")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Company", "Company")
                        .WithMany("companyLocations")
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Countries", "Country")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("countryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Models.userEducation", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("companyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.typeOfEducation", "TypeOfEducation")
                        .WithMany("UserEducations")
                        .HasForeignKey("type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("userEducations")
                        .HasForeignKey("userID");

                    b.Navigation("Company");

                    b.Navigation("TypeOfEducation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.userSkills", b =>
                {
                    b.HasOne("Models.KeySkills", "Skills")
                        .WithMany("UserSkills")
                        .HasForeignKey("skillID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("userId");

                    b.Navigation("Skills");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Category", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("jobCategories");
                });

            modelBuilder.Entity("Models.City", b =>
                {
                    b.Navigation("CompanyLocations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Navigation("AppliedVacancies");

                    b.Navigation("companyLocations");

                    b.Navigation("CompanyVacanies");

                    b.Navigation("Rating");

                    b.Navigation("UserCompanies");
                });

            modelBuilder.Entity("Models.Countries", b =>
                {
                    b.Navigation("City");

                    b.Navigation("CompanyLocations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.JobCategory", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Users");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Models.JobType", b =>
                {
                    b.Navigation("jobTypeVacancies");
                });

            modelBuilder.Entity("Models.KeySkills", b =>
                {
                    b.Navigation("KeySkillsVacancies");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Models.Questions", b =>
                {
                    b.Navigation("reactions");

                    b.Navigation("UserQuess");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Navigation("AppliedVacancies");

                    b.Navigation("Company");

                    b.Navigation("Onlineprofiles");

                    b.Navigation("Rating");

                    b.Navigation("reactions");

                    b.Navigation("RoleUsers");

                    b.Navigation("UserCompanies");

                    b.Navigation("userEducations");

                    b.Navigation("UserQuess");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Models.Vacancy", b =>
                {
                    b.Navigation("AppliedVacancies");

                    b.Navigation("CompanyVacanies");

                    b.Navigation("jobTypeVacancies");

                    b.Navigation("KeySkillsVacancies");
                });

            modelBuilder.Entity("Models.typeOfEducation", b =>
                {
                    b.Navigation("UserEducations");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Navigation("RoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
